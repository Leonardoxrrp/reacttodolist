{"version":3,"sources":["components/TodoForm.js","components/Todos.js","components/TodoList.js","components/Website.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","useState","editTodo","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","ref","maxLength","placeholder","onChange","required","Todos","todos","deleteTodo","updateTodo","setEditTodo","map","todo","key","onClick","size","TodoList","setTodos","newTodo","deletedTodo","filter","element","newValue","prev","item","Website","rel","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed738b66.chunk.js","sourcesContent":["import React, {useState, useEffect,useRef} from 'react'\r\nimport \"../Styles/todoForm.css\"\r\n    \r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.editTodo ? props.editTodo.value : \"\");\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(()=> {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        setInput(\"\");\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random()* 10000),\r\n            text: input\r\n        })\r\n    }\r\n    const handleChange = e => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    return (\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n                {props.editTodo ? (\r\n                    <>\r\n                        <input ref={inputRef} className=\"form-control\" maxLength=\"25\" placeholder={input} value={input} onChange={handleChange} required>\r\n                        </input >\r\n                        <button className=\"btn btn-dark\">Update</button>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <input ref={inputRef} className=\"form-control\" maxLength=\"25\" placeholder=\"Here your text\" value={input} onChange={handleChange} required>\r\n                            </input >\r\n                            <button className=\"btn btn-dark\">Send</button>\r\n                        </>\r\n                    )\r\n                }\r\n\r\n\r\n\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react'\r\nimport \"../Styles/todoContainer.css\"\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport TodoForm from \"../components/TodoForm\"\r\n\r\n\r\nfunction Todos({todos, deleteTodo, updateTodo}) {\r\n\r\n     const [editTodo, setEditTodo] = useState({\r\n         id: null,\r\n         value: \"\"\r\n     })\r\n     \r\n   const submitUpdate = (value) => {\r\n        updateTodo(editTodo.id, value);\r\n        setEditTodo({\r\n            id: null,\r\n            value: \"\"\r\n        })\r\n    }\r\n\r\n    if (editTodo.id) {\r\n        return <TodoForm editTodo={editTodo} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return ( todos.map(todo => \r\n\r\n            <div className=\"todoContainer\"  key= {todo.id}>\r\n                <div className=\"singleTodo\">\r\n                    {todo.text}\r\n                </div>\r\n                <div className=\"buttons\">\r\n                <TiDelete className =\"littleButton\" onClick={()=> deleteTodo(todo.id)} size=\"20px\"/>\r\n                <MdModeEdit className =\"littleButton\" onClick={()=> setEditTodo({id: todo.id, value: todo.text})} size=\"20px\"/>\r\n                </div>\r\n            </div>\r\n            )\r\n    )\r\n}\r\n\r\nexport default Todos;\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport \"../Styles/listContainer.css\"\r\nimport Todo from \"./Todos\"\r\n\r\n\r\nfunction TodoList() {\r\n\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        const newTodo = [todo, ...todos]\r\n        setTodos(newTodo)\r\n\r\n    }\r\n    const deleteTodo = id => {\r\n        const deletedTodo = [...todos].filter(element => element.id !== id)\r\n\r\n        setTodos(deletedTodo)\r\n    }\r\n    const updateTodo = (id, newValue) => {\r\n        setTodos(prev => prev.map(item => item.id === id ? newValue : item))\r\n    }\r\n    // const updateTodo = (id, newValue) =>{\r\n    //     setTodos(prev => prev.map(item => (item.id=== id ? newValue : item)))\r\n    // }\r\n    return (\r\n\r\n        <div className=\"listContainer\">\r\n            <TodoForm onSubmit={addTodo} />\r\n                <Todo\r\n                    todos={todos}\r\n                    deleteTodo={deleteTodo}\r\n                    updateTodo={updateTodo}\r\n                />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\r\nimport {GrLinkedin} from 'react-icons/gr';\r\nimport \"../Styles/website.css\"\r\n\r\n\r\nfunction Website() {\r\n    return (\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/leonardo-rojas-personal/\">\r\n            <GrLinkedin className=\"bottomLeft\"/>\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default Website;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from './components/TodoList';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Website from \"./components/Website\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Website />   \r\n        <h1 className=\"title\">To-do Application</h1>\r\n        <h6>Add, update, and delete</h6>\r\n        <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}